
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
The operation to create or update a virtual machine.
Please note some properties can be set only during virtual machine creation.
.Description
The operation to create or update a virtual machine.
Please note some properties can be set only during virtual machine creation.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IVirtualMachineInstance
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

LINUXCONFIGURATIONSSHPUBLICKEY <IVirtualMachinePropertiesOSProfileLinuxConfigurationSshPublicKeysItem[]>: PublicKeys - The list of SSH public keys used to authenticate with linux based VMs.
  [KeyData <String>]: KeyData - SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format.    For creating ssh keys, see [Create SSH keys on Linux and Mac for Li      nux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
  [Path <String>]: Path - Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys

NETWORKPROFILENETWORKINTERFACE <IVirtualMachinePropertiesNetworkProfileNetworkInterfacesItem[]>: NetworkInterfaces - list of network interfaces to be attached to the virtual machine
  [Id <String>]: ID - Resource Id of the network interface

STORAGEPROFILEDATADISK <IVirtualMachinePropertiesStorageProfileDataDisksItem[]>: adds data disks to the virtual machine
  [Id <String>]: Resource ID of the data disk

WINDOWSCONFIGURATIONSSHPUBLICKEY <IVirtualMachinePropertiesOSProfileWindowsConfigurationSshPublicKeysItem[]>: PublicKeys - The list of SSH public keys used to authenticate with linux based VMs.
  [KeyData <String>]: KeyData - SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format.    For creating ssh keys, see [Create SSH keys on Linux and Mac for Li      nux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
  [Path <String>]: Path - Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
.Link
https://learn.microsoft.com/powershell/module/az.stackhcivm/new-azstackhcivmvirtualmachine
#>
function New-AzStackHCIVMVirtualMachine {
  [OutputType([Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IVirtualMachineInstance])]
  [CmdletBinding(PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
  param(
      [Parameter(Mandatory)]
      [Alias('VirtualMachineName')]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Path')]
      [System.String]
      # Name of the virtual machine
      ${Name},
    
      [Parameter(Mandatory)]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Path')]
      [System.String]
      # The name of the resource group.
      # The name is case insensitive.
      ${ResourceGroupName},

      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Path')]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
      [System.String]
      # The ID of the target subscription.
      ${SubscriptionId},

      [Parameter(Mandatory)]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.String]
      # The geo-location where the resource lives
      ${Location},

      [Parameter(Mandatory)]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.String]
      # The name of the extended location.
      ${CustomLocationId},

      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.Int64]
      # Maximum Dynamic Memory
      ${DynamicMemoryMaximumMemoryInMb},

      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.Int64]
      # Minimum Dynamic Memory
      ${DynamicMemoryMinimumMemoryInMb},

      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.Int32]
      # Defines the amount of extra memory that should be reserved for a virtual machine at runtime, as a percentage of the total memory that the virtual machine is thought to need.
      # This only applies to virtual systems with dynamic memory enabled.
      # This property can be in the range of 5 to 2000.
      ${DynamicMemoryTargetBuffer},

      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.Int64]
      # RAM in MB for the virtual machine
      ${VmMemoryInMB},

      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.Int32]
      # Number of processors for the virtual machine
      ${VmProcessor},

      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.PSArgumentCompleterAttribute("Default", "Standard_A2_v2", "Standard_A4_v2", "Standard_D2s_v3", "Standard_D4s_v3", "Standard_D8s_v3", "Standard_D16s_v3", "Standard_D32s_v3", "Standard_DS2_v2", "Standard_DS3_v2", "Standard_DS4_v2", "Standard_DS5_v2", "Standard_DS13_v2", "Standard_K8S_v1", "Standard_K8S2_v1", "Standard_K8S3_v1", "Standard_K8S4_v1", "Standard_NK6", "Standard_NK12", "Standard_NV6", "Standard_NV12", "Standard_K8S5_v1", "Custom")]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.String]
      # Size of the VM. Can be a Predefined size or Custom. Possible Predefined Sizes include - Custom,Standard_A2_v2,Standard_A4_v2,Standard_D16s_v3,Standard_D2s_v3,Standard_D32s_v3,Standard_D4s_v3,Standard_D8s_v3,Standard_DS13_v2,Standard_DS2_v2,Standard_DS3_v2,Standard_DS4_v2,Standard_DS5_v2,Standard_K8S2_v1,Standard_K8S3_v1,Standard_K8S4_v1,Standard_K8S5_v1,Standard_K8S_v1,Standard_NK12,Standard_NK6,Standard_NV12, StandardNv6  

      ${VmSize},

      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.PSArgumentCompleterAttribute("SystemAssigned")]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.String]
      # The identity type.
      ${IdentityType},

      [Parameter(ParameterSetName='ByImageId', Mandatory)]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.String]
      # Resource ID of the image to create the VM with. 
      ${ImageId}, 

      [Parameter(ParameterSetName='ByImageName',Mandatory)]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.String]
      # Name of the image to create the VM with. 
      ${ImageName},

      [Parameter(ParameterSetName='ByImageName')]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.String]
      # Resource group of the image to create the VM from. 
      ${ImageResourceGroup},

      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.Management.Automation.SwitchParameter]
      # DisablePasswordAuthentication - whether password authentication should be disabled
      ${DisablePasswordAuthentication},

      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.Management.Automation.SwitchParameter]
      # Usedâ€¯to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine creation process. VM Agent is provsioned by default. Please pass -ProvisionVMAgent:$false to disable. 
      ${ProvisionVMAgent},

      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.Management.Automation.SwitchParameter]
      # Indicates whether virtual machine configuration agent should be provisioned on the virtual machine. When this property is not specified, default behavior is to set it to true. VM Config Agent is provisioned by default. Please pass -ProvisionVMConfigAgent:$false to disable.
      ${ProvisionVMConfigAgent},

      [Parameter()]
      [AllowEmptyCollection()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.String[]]
      # NetworkInterfaces - list of network interfaces to be attached to the virtual machine in ARM Id format. 
      ${NicId},

      [Parameter()]
      [AllowEmptyCollection()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.String[]]
      # NetworkInterfaces - list of network interfaces to be attached to the virtual machine in name format. 
      ${NicName},

      [Parameter()]
      [AllowEmptyCollection()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.String]
      # NetworkInterfaces - Resource Group of Network Interfaces. 
      ${NicResourceGroup},

      [Parameter()]
      [AllowEmptyCollection()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.String[]]
      # Data Disks - List of data disks to be attached to the virtual machine in id format. 
      ${DataDiskId},

      [Parameter()]
      [AllowEmptyCollection()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.String[]]
      # Data Disks - List of data disks to be attached to the virtual machine in name format .
      ${DataDiskName},

      [Parameter()]
      [AllowEmptyCollection()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.String]
      # Data Disks - Resource Group of Data Disks. 
      ${DataDiskResourceGroup},

      [Parameter(ParameterSetName='ByOsDiskId',Mandatory)]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.String]
      # Resource ID of the OS disk
      ${OSDiskId},

      [Parameter(ParameterSetName='ByOsDiskName',Mandatory)]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.String]
      # Name of the OS disk
      ${OSDiskName},

      [Parameter(ParameterSetName='ByOsDiskName')]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.String]
      # Resource Group of the OS disk
      ${OSDiskResourceGroup},

      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.String]
      # AdminPassword - admin password
      ${AdminPassword},

      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.String]
      # AdminUsername - admin username
      ${AdminUsername},

      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.String]
      # ComputerName - name of the computer
      ${ComputerName},

      [Parameter(Mandatory)]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.PSArgumentCompleterAttribute("Windows", "Linux")]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.String]
      # OsType - string specifying whether the OS is Linux or Windows
      ${OsType},

      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.Management.Automation.SwitchParameter]
      # Used to indicate whether or not to enable TPM
      ${EnableTpm},

      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.String[]]
      # PublicKeys - The list of SSH public keys used to authenticate with VMs
      ${SshPublicKey},

      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.String]
      # Id of the storage container that hosts the VM configuration file
      ${StoragePathId},

      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.String]
      # Name of the storage container that hosts the VM configuration file
      ${StoragePathName},

      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.String]
      # Storage Container resource group. The resource group of the virtual machine will be used if this value is not provided. 
      ${StoragePathResourceGroup},

      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.Management.Automation.SwitchParameter]
      # Specifies whether secure boot should be enabled on the virtual machine.
      ${SecureBootEnabled},

      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.Management.Automation.SwitchParameter]
      # Specifies Whether to EnableAutomaticUpdates on the machine.
      ${EnableAutomaticUpdate},

      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Body')]
      [System.String]
      # TimeZone for the virtual machine
      ${TimeZone},

      [Parameter()]
      [Alias('AzureRMContext', 'AzureCredential')]
      [ValidateNotNull()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Azure')]
      [System.Management.Automation.PSObject]
      # The credentials, account, tenant, and subscription used for communication with Azure.
      ${DefaultProfile},
  
      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Runtime')]
      [System.Management.Automation.SwitchParameter]
      # Run the command as a job
      ${AsJob},
  
      [Parameter(DontShow)]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Runtime')]
      [System.Management.Automation.SwitchParameter]
      # Wait for .NET debugger to attach
      ${Break},
  
      [Parameter(DontShow)]
      [ValidateNotNull()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Runtime')]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.SendAsyncStep[]]
      # SendAsync Pipeline Steps to be appended to the front of the pipeline
      ${HttpPipelineAppend},
  
      [Parameter(DontShow)]
      [ValidateNotNull()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Runtime')]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.SendAsyncStep[]]
      # SendAsync Pipeline Steps to be prepended to the front of the pipeline
      ${HttpPipelinePrepend},
  
      [Parameter()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Runtime')]
      [System.Management.Automation.SwitchParameter]
      # Run the command asynchronously
      ${NoWait},
  
      [Parameter(DontShow)]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Runtime')]
      [System.Uri]
      # The URI for the proxy server to use
      ${Proxy},
  
      [Parameter(DontShow)]
      [ValidateNotNull()]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Runtime')]
      [System.Management.Automation.PSCredential]
      # Credentials for a proxy server to use for the remote call
      ${ProxyCredential},
  
      [Parameter(DontShow)]
      [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Category('Runtime')]
      [System.Management.Automation.SwitchParameter]
      # Use the default credentials for the proxy
      ${ProxyUseDefaultCredentials}
  )

    #name 
    if ($Name -notmatch $machineNameRegex){
      Write-Error "Invalid Name:  $Name. The name must start with an alphanumeric character, contain all alphanumeric characters or '-' or '_' or '.' and end with an alphanumeric character. The max length is 64 characters." -ErrorAction Stop
    }

    if ($CustomLocationId -notmatch $customLocationRegex){
      Write-Error "Invalid CustomLocationId: $CustomLocationId" -ErrorAction Stop
    }
    
    $PSBoundParameters.Add("Kind", "HCI")
    $PSBoundParameters.Add("IdentityType", "SystemAssigned")
    $null = $PSBoundParameters.Remove("DynamicMemoryMaximumMemory") 
    $null = $PSBoundParameters.Remove("DynamicMemoryMinimumMemory") 
    $null = $PSBoundParameters.Remove("DynamicMemoryTargetBuffer") 
    $null = $PSBoundParameters.Remove("VmMemoryInMB")
    $null = $PSBoundParameters.Remove("VmProcessor")
    $null = $PSBoundParameters.Remove("VmSize") 
    $null = $PSBoundParameters.Remove("NicId") 
    $null = $PSBoundParameters.Remove("NicName")
    $null = $PSBoundParameters.Remove("NicResourceGroup")
    $null = $PSBoundParameters.Remove("CustomLocationId") 
    $null = $PSBoundParameters.Remove("ImageId") 
    $null = $PSBoundParameters.Remove("ImageName")
    $null = $PSBoundParameters.Remove("ImageResourceGroup") 
    $null = $PSBoundParameters.Remove("DisablePasswordAuthentication") 
    $null = $PSBoundParameters.Remove("ProvisionVMAgent")
    $null = $PSBoundParameters.Remove("ProvisionVMConfigAgent")
    $null = $PSBoundParameters.Remove("DataDiskId") 
    $null = $PSBoundParameters.Remove("DataDiskName") 
    $null = $PSBoundParameters.Remove("DataDiskResourceGroup") 
    $null = $PSBoundParameters.Remove("OSDiskId") 
    $null = $PSBoundParameters.Remove("OSDiskName") 
    $null = $PSBoundParameters.Remove("OSDiskResourceGroup")
    $null = $PSBoundParameters.Remove("AdminPassword") 
    $null = $PSBoundParameters.Remove("AdminUsername")
    $null = $PSBoundParameters.Remove("ComputerName") 
    $null = $PSBoundParameters.Remove("EnableTpm") 
    $null = $PSBoundParameters.Remove("SshPublicKey") 
    $null = $PSBoundParameters.Remove("SecureBootEnabled") 
    $null = $PSBoundParameters.Remove("StoragePathResourceGroup")
    $null = $PSBoundParameters.Remove("StoragePathName")
    $null = $PSBoundParameters.Remove("StoragePathId")
    $null = $PSBoundParameters.Remove("EnableAutomaticUpdate")
    $null = $PSBoundParameters.Remove("TimeZone")
    $null = $PSBoundParameters.Remove("NoWait")
    $null = $PSBoundParameters.Remove("AsJob")

    if ($OsType.ToString().ToLower() -eq "windows"){
      $null = $PSBoundParameters.Remove("OsType")
      $PSBoundParameters.Add('OSType', "Windows")
    } elseif ($OsType.ToString().ToLower() -eq "linux"){
      $null = $PSBoundParameters.Remove("OsType")
      $PSBoundParameters.Add('OSType', "Linux")
    } else {
      Write-Error "Invalid OSType provided: $OsType. Accepted Values are 'Windows' and 'Linux'" -ErrorAction Stop
   }


    Az.StackHCIVM.internal\New-AzStackHCIVMMachine @PSBoundParameters  | Out-Null

    if ($PSCmdlet.ParameterSetName -eq "ByImageId"){
      if($ImageId -notmatch $marketplaceGalImageRegex -and $ImageId -notmatch $galImageRegex){
        Write-Error "Invalid ImageId: $ImageId" -ErrorAction Stop
      }
      $PSBoundParameters.Add('ImageId', $ImageId)
    } elseif ($PSCmdlet.ParameterSetName -eq "ByImageName"){
        $rg = $ResourceGroupName
        if($ImageResourceGroup){
          $rg = $ImageResourceGroup
        }
        $isGalleryImage = $false
        $isMarketplaceGalleryImage = $false
      
      $galImage = Az.StackHCIVM.internal\Get-AzStackHCIVMGalleryImage -Name $ImageName -ResourceGroupName $rg -SubscriptionId $SubscriptionId -ErrorAction SilentlyContinue
      if($galImage -eq $null){
        $marketplaceGalImage = Az.StackHCIVM.internal\Get-AzStackHCIVMMarketplaceGalleryImage -Name $ImageName -ResourceGroupName $rg -SubscriptionId $SubscriptionId -ErrorAction SilentlyContinue
        if ($marketplacegalImage -eq $null){
          Write-Error "An Image with name: $ImageName does not exist in Resource Group: $rg" -ErrorAction Stop
        } else {
          $isMarketplaceGalleryImage = $true
        }
      
      } else{
        $isGalleryImage = $true 
        }

        if ($isGalleryImage){
          $ImageId = "/subscriptions/$SubscriptionId/resourceGroups/$rg/providers/Microsoft.AzureStackHCI/galleryimages/$ImageName"
        } else {
          $ImageId = "/subscriptions/$SubscriptionId/resourceGroups/$rg/providers/Microsoft.AzureStackHCI/marketplacegalleryimages/$ImageName"
        }

        $null = $PSBoundParameters.Remove("ImageResourceGroup")
        $null = $PSBoundParameters.Remove("ImageName")
        $PSBoundParameters.Add('ImageId', $ImageId)

  } elseif ($PSCmdlet.ParameterSetName -eq "ByOsDiskId"){      
      if($OSDiskId -notmatch $vhdRegex){
        Write-Error "Invalid OSDiskId : $OSDiskId" -ErrorAction Stop
      }
      $PSBoundParameters.Add('OSDiskId', $OSDiskId)
  } elseif ($PSCmdlet.ParameterSetName -eq "ByOsDiskName"){
      if ($OSDiskResourceGroup){
          $OSDiskId = "/subscriptions/$SubscriptionId/resourceGroups/$OSDiskResourceGroup/providers/Microsoft.AzureStackHCI/virtualharddisks/$OSDiskName"
      } else {
          $OSDiskId = "/subscriptions/$SubscriptionId/resourceGroups/$ResourceGroupName/providers/Microsoft.AzureStackHCI/virtualharddisks/$OSDiskName"
      }
      $PSBoundParameters.Add('OSDiskId', $OSDiskId)
      $null = $PSBoundParameters.Remove("OSDiskResourceGroup")
      $null = $PSBoundParameters.Remove("OSDiskName")
      
  } else {
      Write-Error "Either Image or OS Disk is required. " -ErrorAction Stop
  }

  if ($VmSize){
    if($VmSize.ToString().ToLower() -eq "default"){
      Write-Error "Invalid VM Size provided. 'Default' is not a supported VmSize." -ErrorAction Stop
    }
    if($VmSize.ToString().ToLower() -eq "custom"){
      if (-Not ($VmProcessor -and $VmMemoryInMB)){
        Write-Error "VmMemory and VmProcessor required for Custom VmSize" -ErrorAction Stop
      }
      $PSBoundParameters.Add("VmMemory", $VmMemoryInMB)
      $PSBoundParameters.Add("VmProcessor", $VmProcessor)
    } else {
        if ($VmProcessor -or $VmMemoryInMB){
          Write-Error "VmMemory and VmProcessor will be ignored. Please specify Custom for VMSize." -ErrorAction Continue
          $null = $PSBoundParameters.Remove("VmProcessor")
          $null = $PSBoundParameters.Remove("VmMemoryInMB")
        }
    }
  }

  if ($NicId){
    $NetworkProfileNetworkInterface =  [System.Collections.ArrayList]::new()
    foreach ($NId in $NicId){
      if ($NId -notmatch $nicRegex){
        Write-Error "Invalid Nic Id provided: $NId." -ErrorAction Stop
      }
      
      $nic = Az.StackHCIVM\Get-AzStackHCIVMNetworkInterface  -ResourceId $NId -ErrorAction SilentlyContinue  
      if ($nic -eq $null){
        Write-Error "A Network Interface with id: $NId does not exist." -ErrorAction Stop
      }
      
      $NetworkInterface = @{Id = $NId}
      [void]$NetworkProfileNetworkInterface.Add($NetworkInterface)
    }
    $null = $PSBoundParameters.Remove("NicId")
    $PSBoundParameters.Add('NetworkProfileNetworkInterface', $NetworkProfileNetworkInterface)
  } elseif ($NicName){
      $rg = $ResourceGroupName
      if($NicResourceGroup){
        $rg = $NicResourceGroup
      }

      $NetworkProfileNetworkInterface =  [System.Collections.ArrayList]::new()
      foreach ($NName in $NicName){
        $NicIdNew = "/subscriptions/$SubscriptionId/resourceGroups/$rg/providers/Microsoft.AzureStackHCI/networkinterfaces/$NName"
        $nic = Az.StackHCIVM\Get-AzStackHCIVMNetworkInterface -ResourceId $NicIdNew  -ErrorAction SilentlyContinue
   
        if ($nic -eq $null){
          Write-Error "A Network Interface with id: $NicIdNew does not exist." -ErrorAction Stop
        }
      
        $NetworkInterface = @{Id = $NicIdNew}
        [void]$NetworkProfileNetworkInterface.Add($NetworkInterface)
      }
      $null = $PSBoundParameters.Remove("NicName")
      $null = $PSBoundParameters.Remove("NicResourceGroup")

      $PSBoundParameters.Add('NetworkProfileNetworkInterface', $NetworkProfileNetworkInterface)
  }
  if ($OsType.ToString().ToLower() -eq "windows"){
    $OsType = "Windows"
    if($ComputerName){
      if ($ComputerName.length -gt 15 -or $ComputerName -match $allDigitsRegex -or $ComputerName -match $invalidCharactersComputerName){
        Write-Error "Invalid Computer Name : $ComputerName." -ErrorAction Stop
      }
    }
    if ($DisablePasswordAuthentication.IsPresent){
      $null = $PSBoundParameters.Remove('DisablePasswordAuthentication')
    }
  
    $PSBoundParameters.Add("WindowConfigurationProvisionVMAgent", $true)
    $PSBoundParameters.Add("WindowConfigurationProvisionVMConfigAgent", $true)
    if(-not $ProvisionVMAgent){
      $null = $PSBoundParameters.Remove("WindowConfigurationProvisionVMAgent")
    }
    if (-not $ProvisionVMConfigAgent){
      $null = $PSBoundParameters.Remove("WindowConfigurationProvisionVMConfigAgent")
    }
    $null = $PSBoundParameters.Remove("ProvisionVMAgent")
    $null = $PSBoundParameters.Remove("ProvisionVMConfigAgent")


    if ($SshPublicKey){
      $WindowsConfigurationSshPublicKey = [System.Collections.ArrayList]::new()
      foreach ($key in $SshPublicKey){
        $keyData = Get-Content -Path $key
        $WindowsKey = @{KeyData = $keyData}
        [void]$WindowsConfigurationSshPublicKey.Add($WindowsKey)
      }
      $null = $PSBoundParameters.Remove('SshPublicKey')
      $PSBoundParameters.Add("WindowsConfigurationSshPublicKey", $WindowsConfigurationSshPublicKey)
    }
  } elseif ($OsType.ToString().ToLower() -eq "linux"){
      $OsType = "Linux"
      if ($ComputerName.length -gt 64 -or $ComputerName -match $allDigitsRegex -or $ComputerName -match $invalidCharactersComputerName){
        Write-Error "Invalid Computer Name : $ComputerName." -ErrorAction Stop
      }
      if ($EnableAutomaticUpdates.IsPresent){
        $null = $PSBoundParameters.Remove('EnableAutomaticUpdates')
      }
      if ($TimeZone){
        $null = $PSBoundParameters.Remove('TimeZone')
      }
      $PSBoundParameters.Add("LinuxConfigurationProvisionVMAgent", $true)
      $PSBoundParameters.Add("LinuxConfigurationProvisionVMConfigAgent", $true)
      if(-not $ProvisionVMAgent){
        $null = $PSBoundParameters.Remove("LinuxConfigurationProvisionVMAgent")
      }
      if (-not $ProvisionVMConfigAgent){
        $null = $PSBoundParameters.Remove("LinuxConfigurationProvisionVMConfigAgent")
      }
      $null = $PSBoundParameters.Remove("ProvisionVMAgent")
      $null = $PSBoundParameters.Remove("ProvisionVMConfigAgent")

      
      if ($SshPublicKey){
        $LinuxConfigurationSshPublicKey = [System.Collections.ArrayList]::new()
        foreach ($key in $SshPublicKey){
          $keyData = Get-Content -Path $key
          $LinuxKey = @{KeyData = $keyData}
          [void]$LinuxConfigurationSshPublicKey.Add($LinuxKey)
        }
        $null = $PSBoundParameters.Remove('SshPublicKey')
        $PSBoundParameters.Add("LinuxConfigurationSshPublicKey", $LinuxConfigurationSshPublicKey)
      }
  } else {
     Write-Error "Invalid OSType provided: $OsType. Accepted Values are 'Windows' and 'Linux'" -ErrorAction Stop
  }

  if($StoragePathId){
    if($StoragePathId -notmatch $storagePathRegex){
      Write-Error "Invalid StoragePathId: $StoragePathId" -ErrorAction Stop
    }
  } elseif ($StoragePathName){
      if ($StoragePathResourceGroup){
          $ContainerId = "/subscriptions/$SubscriptionId/resourceGroups/$StoragePathResourceGroup/providers/Microsoft.AzureStackHCI/storagecontainers/$StoragePathName"
      } else {
          $ContainerId = "/subscriptions/$SubscriptionId/resourceGroups/$ResourceGroupName/providers/Microsoft.AzureStackHCI/storagecontainers/$StoragePathName"
      }
      $PSBoundParameters.Add('StoragePathId', $ContainerId)
      $null = $PSBoundParameters.Remove("StoragePathName")
      $null = $PSBoundParameters.Remove("StoragePathReourceGroup")
  }


  if ($DataDiskId){
    $StorageProfileDataDisk =  [System.Collections.ArrayList]::new()
    foreach ($DiskId in $DataDiskId){
      if ($DiskId -notmatch $vhdRegex){
        Write-Error "Invalid Data Disk Id provided: $DiskId." -ErrorAction Stop
      }
      $DataDisk = @{Id = $DiskId}
      [void]$StorageProfileDataDisk.Add($DataDisk)
    }
    $null = $PSBoundParameters.Remove("DataDiskId")
    $PSBoundParameters.Add('StorageProfileDataDisk',  $StorageProfileDataDisk)
  } elseif ($DataDiskName){
      $rg = $ResourceGroupName
      if($DataDiskResourceGroup){
        $rg = $DataDiskResourceGroup
      }
     
      $StorageProfileDataDisk =  [System.Collections.ArrayList]::new()
      foreach ($DiskName in $DataDiskName){
        $DataDiskIdNew = "/subscriptions/$SubscriptionId/resourceGroups/$rg/providers/Microsoft.AzureStackHCI/virtualharddisks/$DiskName"
        $DataDisk = @{Id = $DataDiskIdNew}
        [void]$StorageProfileDataDisk.Add($DataDisk)
      }
      $null = $PSBoundParameters.Remove("DataDiskName")
      $null = $PSBoundParameters.Remove("DataDiskResourceGroup")
      $PSBoundParameters.Add('StorageProfileDataDisk',  $StorageProfileDataDisk)
  }  
  $resourceUri = "/subscriptions/" + $subscriptionId + "/resourceGroups/" + $resourceGroupName + "/providers/Microsoft.HybridCompute/machines/" + $Name
  $PSBoundParameters.Add("ResourceUri", $resourceUri)
  $PSBoundParameters.Add("CustomLocationId", $CustomLocationId)
  $PSBoundParameters.Add("OSDiskOstype", $OsType)
  $PSBoundParameters.Add('VmSize', $VmSize)
  if ($ComputerName){
    $PSBoundParameters.Add('ComputerName', $ComputerName)
  }
  if ($AdminUsername){
    $PSBoundParameters.Add('AdminUsername', $AdminUsername)
  }
  if ($AdminPassword){
    $PSBoundParameters.Add('AdminPassword', $AdminPassword)
  }
  if ($DynamicMemoryMaximumMemory){
    $PSBoundParameters.Add('DynamicMemoryMaximumMemory', $DynamicMemoryMaximumMemory)
  }
  if ($DynamicMemoryMinimumMemory){
    $PSBoundParameters.Add('DynamicMemoryMinimumMemory', $DynamicMemoryMinimumMemory)
  }
  if ($DynamicMemoryTargetBuffer){
    $PSBoundParameters.Add('DynamicMemoryTargetBuffer', $DynamicMemoryTargetBuffer)
  }
  if ($EnableTpm.IsPresent){
    $PSBoundParameters.Add('EnableTpm', $EnableTpm)
  }
  IF($SecureBootEnabled.IsPresent){
    $PSBoundParameters.Add('SecureBootEnabled', $SecureBootEnabled)
  }
  $null = $PSBoundParameters.Remove("Name")
  $null = $PSBoundParameters.Remove("ResourceGroupName")
  $null = $PSBoundParameters.Remove("SubscriptionId")
  $null = $PSBoundParameters.Remove("ResourceId")
  $null = $PSBoundParameters.Remove("NicResourceGroup")
  $null = $PSBoundParameters.Remove("NicName")
  $null = $PSBoundParameters.Remove("Kind") 
  $null = $PSBoundParameters.Remove("Location") 
  $null = $PSBoundParameters.Remove("OSType")
  $null = $PSBoundParameters.Remove("IdentityType")
  return Az.StackHCIVM.internal\New-AzStackHCIVMVirtualMachine @PSBoundParameters
}


# SIG # Begin signature block
# MIIoKQYJKoZIhvcNAQcCoIIoGjCCKBYCAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCAEPe5/DChs1BSy
# 2mn4AXWh/Re8pjVwzfra/cKymXBjQ6CCDXYwggX0MIID3KADAgECAhMzAAADrzBA
# DkyjTQVBAAAAAAOvMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNVBAYTAlVTMRMwEQYD
# VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p
# bmcgUENBIDIwMTEwHhcNMjMxMTE2MTkwOTAwWhcNMjQxMTE0MTkwOTAwWjB0MQsw
# CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
# ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMR4wHAYDVQQDExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
# AQDOS8s1ra6f0YGtg0OhEaQa/t3Q+q1MEHhWJhqQVuO5amYXQpy8MDPNoJYk+FWA
# hePP5LxwcSge5aen+f5Q6WNPd6EDxGzotvVpNi5ve0H97S3F7C/axDfKxyNh21MG
# 0W8Sb0vxi/vorcLHOL9i+t2D6yvvDzLlEefUCbQV/zGCBjXGlYJcUj6RAzXyeNAN
# xSpKXAGd7Fh+ocGHPPphcD9LQTOJgG7Y7aYztHqBLJiQQ4eAgZNU4ac6+8LnEGAL
# go1ydC5BJEuJQjYKbNTy959HrKSu7LO3Ws0w8jw6pYdC1IMpdTkk2puTgY2PDNzB
# tLM4evG7FYer3WX+8t1UMYNTAgMBAAGjggFzMIIBbzAfBgNVHSUEGDAWBgorBgEE
# AYI3TAgBBggrBgEFBQcDAzAdBgNVHQ4EFgQURxxxNPIEPGSO8kqz+bgCAQWGXsEw
# RQYDVR0RBD4wPKQ6MDgxHjAcBgNVBAsTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEW
# MBQGA1UEBRMNMjMwMDEyKzUwMTgyNjAfBgNVHSMEGDAWgBRIbmTlUAXTgqoXNzci
# tW2oynUClTBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8vd3d3Lm1pY3Jvc29mdC5j
# b20vcGtpb3BzL2NybC9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3JsMGEG
# CCsGAQUFBwEBBFUwUzBRBggrBgEFBQcwAoZFaHR0cDovL3d3dy5taWNyb3NvZnQu
# Y29tL3BraW9wcy9jZXJ0cy9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3J0
# MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggIBAISxFt/zR2frTFPB45Yd
# mhZpB2nNJoOoi+qlgcTlnO4QwlYN1w/vYwbDy/oFJolD5r6FMJd0RGcgEM8q9TgQ
# 2OC7gQEmhweVJ7yuKJlQBH7P7Pg5RiqgV3cSonJ+OM4kFHbP3gPLiyzssSQdRuPY
# 1mIWoGg9i7Y4ZC8ST7WhpSyc0pns2XsUe1XsIjaUcGu7zd7gg97eCUiLRdVklPmp
# XobH9CEAWakRUGNICYN2AgjhRTC4j3KJfqMkU04R6Toyh4/Toswm1uoDcGr5laYn
# TfcX3u5WnJqJLhuPe8Uj9kGAOcyo0O1mNwDa+LhFEzB6CB32+wfJMumfr6degvLT
# e8x55urQLeTjimBQgS49BSUkhFN7ois3cZyNpnrMca5AZaC7pLI72vuqSsSlLalG
# OcZmPHZGYJqZ0BacN274OZ80Q8B11iNokns9Od348bMb5Z4fihxaBWebl8kWEi2O
# PvQImOAeq3nt7UWJBzJYLAGEpfasaA3ZQgIcEXdD+uwo6ymMzDY6UamFOfYqYWXk
# ntxDGu7ngD2ugKUuccYKJJRiiz+LAUcj90BVcSHRLQop9N8zoALr/1sJuwPrVAtx
# HNEgSW+AKBqIxYWM4Ev32l6agSUAezLMbq5f3d8x9qzT031jMDT+sUAoCw0M5wVt
# CUQcqINPuYjbS1WgJyZIiEkBMIIHejCCBWKgAwIBAgIKYQ6Q0gAAAAAAAzANBgkq
# hkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x
# EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
# bjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5
# IDIwMTEwHhcNMTEwNzA4MjA1OTA5WhcNMjYwNzA4MjEwOTA5WjB+MQswCQYDVQQG
# EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
# A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQg
# Q29kZSBTaWduaW5nIFBDQSAyMDExMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIIC
# CgKCAgEAq/D6chAcLq3YbqqCEE00uvK2WCGfQhsqa+laUKq4BjgaBEm6f8MMHt03
# a8YS2AvwOMKZBrDIOdUBFDFC04kNeWSHfpRgJGyvnkmc6Whe0t+bU7IKLMOv2akr
# rnoJr9eWWcpgGgXpZnboMlImEi/nqwhQz7NEt13YxC4Ddato88tt8zpcoRb0Rrrg
# OGSsbmQ1eKagYw8t00CT+OPeBw3VXHmlSSnnDb6gE3e+lD3v++MrWhAfTVYoonpy
# 4BI6t0le2O3tQ5GD2Xuye4Yb2T6xjF3oiU+EGvKhL1nkkDstrjNYxbc+/jLTswM9
# sbKvkjh+0p2ALPVOVpEhNSXDOW5kf1O6nA+tGSOEy/S6A4aN91/w0FK/jJSHvMAh
# dCVfGCi2zCcoOCWYOUo2z3yxkq4cI6epZuxhH2rhKEmdX4jiJV3TIUs+UsS1Vz8k
# A/DRelsv1SPjcF0PUUZ3s/gA4bysAoJf28AVs70b1FVL5zmhD+kjSbwYuER8ReTB
# w3J64HLnJN+/RpnF78IcV9uDjexNSTCnq47f7Fufr/zdsGbiwZeBe+3W7UvnSSmn
# Eyimp31ngOaKYnhfsi+E11ecXL93KCjx7W3DKI8sj0A3T8HhhUSJxAlMxdSlQy90
# lfdu+HggWCwTXWCVmj5PM4TasIgX3p5O9JawvEagbJjS4NaIjAsCAwEAAaOCAe0w
# ggHpMBAGCSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBRIbmTlUAXTgqoXNzcitW2o
# ynUClTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYD
# VR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBRyLToCMZBDuRQFTuHqp8cx0SOJNDBa
# BgNVHR8EUzBRME+gTaBLhklodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2Ny
# bC9wcm9kdWN0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3JsMF4GCCsG
# AQUFBwEBBFIwUDBOBggrBgEFBQcwAoZCaHR0cDovL3d3dy5taWNyb3NvZnQuY29t
# L3BraS9jZXJ0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3J0MIGfBgNV
# HSAEgZcwgZQwgZEGCSsGAQQBgjcuAzCBgzA/BggrBgEFBQcCARYzaHR0cDovL3d3
# dy5taWNyb3NvZnQuY29tL3BraW9wcy9kb2NzL3ByaW1hcnljcHMuaHRtMEAGCCsG
# AQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAHAAbwBsAGkAYwB5AF8AcwB0AGEAdABl
# AG0AZQBuAHQALiAdMA0GCSqGSIb3DQEBCwUAA4ICAQBn8oalmOBUeRou09h0ZyKb
# C5YR4WOSmUKWfdJ5DJDBZV8uLD74w3LRbYP+vj/oCso7v0epo/Np22O/IjWll11l
# hJB9i0ZQVdgMknzSGksc8zxCi1LQsP1r4z4HLimb5j0bpdS1HXeUOeLpZMlEPXh6
# I/MTfaaQdION9MsmAkYqwooQu6SpBQyb7Wj6aC6VoCo/KmtYSWMfCWluWpiW5IP0
# wI/zRive/DvQvTXvbiWu5a8n7dDd8w6vmSiXmE0OPQvyCInWH8MyGOLwxS3OW560
# STkKxgrCxq2u5bLZ2xWIUUVYODJxJxp/sfQn+N4sOiBpmLJZiWhub6e3dMNABQam
# ASooPoI/E01mC8CzTfXhj38cbxV9Rad25UAqZaPDXVJihsMdYzaXht/a8/jyFqGa
# J+HNpZfQ7l1jQeNbB5yHPgZ3BtEGsXUfFL5hYbXw3MYbBL7fQccOKO7eZS/sl/ah
# XJbYANahRr1Z85elCUtIEJmAH9AAKcWxm6U/RXceNcbSoqKfenoi+kiVH6v7RyOA
# 9Z74v2u3S5fi63V4GuzqN5l5GEv/1rMjaHXmr/r8i+sLgOppO6/8MO0ETI7f33Vt
# Y5E90Z1WTk+/gFcioXgRMiF670EKsT/7qMykXcGhiJtXcVZOSEXAQsmbdlsKgEhr
# /Xmfwb1tbWrJUnMTDXpQzTGCGgkwghoFAgEBMIGVMH4xCzAJBgNVBAYTAlVTMRMw
# EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVN
# aWNyb3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNp
# Z25pbmcgUENBIDIwMTECEzMAAAOvMEAOTKNNBUEAAAAAA68wDQYJYIZIAWUDBAIB
# BQCgga4wGQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQwHAYKKwYBBAGCNwIBCzEO
# MAwGCisGAQQBgjcCARUwLwYJKoZIhvcNAQkEMSIEIESLhEeUobmnu2FZYbk+yYW6
# qKq4aAur9sSkofr7N/6yMEIGCisGAQQBgjcCAQwxNDAyoBSAEgBNAGkAYwByAG8A
# cwBvAGYAdKEagBhodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20wDQYJKoZIhvcNAQEB
# BQAEggEAHe/fPSp+PUnEN6bmdaB6cxDz9dv/9/wLKGzFG6BtEww1plxsRWj5c3Ey
# V818NhIqCIfJNuWeSVpcP1Z0Pdkt7WMmh+WuosdN2ibYsYsI7uZxj+O7smpwMCE6
# M7uFKIh3B6i1NmqGBzK662CiGnXvwEsk284uUpSfSe81neYK7fsGdFxgEc6FzeIN
# ExhsWcMKHTL6gmmSY+ouGJ4r4SHcedXHlCBX3Y+IUQoyrkTYY3kgK5K44a+HZKAS
# 3uCExKOQ8lItI438H8wV63eWAepz1fgkqd2OQJisroW+bb6VQzvxI61r86K4gvrv
# 82kprwq4jSDPVxwzABS9c8anN/WGYKGCF5MwghePBgorBgEEAYI3AwMBMYIXfzCC
# F3sGCSqGSIb3DQEHAqCCF2wwghdoAgEDMQ8wDQYJYIZIAWUDBAIBBQAwggFRBgsq
# hkiG9w0BCRABBKCCAUAEggE8MIIBOAIBAQYKKwYBBAGEWQoDATAxMA0GCWCGSAFl
# AwQCAQUABCBnGv8e2WtaTr835uL5/e81iK6SRb4vIkCGCIcoRprycgIGZaAV3Dyu
# GBIyMDI0MDEzMDA1MDQ1Mi44NlowBIACAfSggdGkgc4wgcsxCzAJBgNVBAYTAlVT
# MRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
# ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJTAjBgNVBAsTHE1pY3Jvc29mdCBBbWVy
# aWNhIE9wZXJhdGlvbnMxJzAlBgNVBAsTHm5TaGllbGQgVFNTIEVTTjozNzAzLTA1
# RTAtRDk0NzElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZaCC
# EeowggcgMIIFCKADAgECAhMzAAAB1OTpAy/ArGmsAAEAAAHUMA0GCSqGSIb3DQEB
# CwUAMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
# EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNV
# BAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMB4XDTIzMDUyNTE5MTIy
# N1oXDTI0MDIwMTE5MTIyN1owgcsxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
# aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
# cG9yYXRpb24xJTAjBgNVBAsTHE1pY3Jvc29mdCBBbWVyaWNhIE9wZXJhdGlvbnMx
# JzAlBgNVBAsTHm5TaGllbGQgVFNTIEVTTjozNzAzLTA1RTAtRDk0NzElMCMGA1UE
# AxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZTCCAiIwDQYJKoZIhvcNAQEB
# BQADggIPADCCAgoCggIBAJhT3i2bAiSXfndJZ6PXJtZxIBu7wUvBMS06/De5cylr
# UOcNcPBu2Qtz6hPwE22Ly37fxPCS1+CgAz038E4fJPgKlcHUfCfVhii+5i6OhBX2
# SbJToPpC21Mgo3t9lOOg20iEjkIGTBL4yTALB1o3LJK+PA+9m7EfxE1w44HwAEOE
# kf6/D+N6/4bbQcTQbBp3fbfHi4Di0uQTR73JoPvH+zUXeW3s2LjukkwYwuplAIrt
# QJR5Zq5YX3Bkg1Djn21I8h7/Erq20vJgfN3cN5FEvFA//tzug8k8MWClsYHYdElo
# TSm5FEOiIM/sknFiv5METGEja6VlZuAvgJ9ZrDBvUuwmYVYkduoavqjSKtbsioOR
# /aoRsxFPVZQzXkXmgFzkuDXyVvexRbuRE+8rCZ9pEGSuaKXQf+2/cdjIToDj3RkU
# Rw+Tp3NgAp8J7e8qlFUTh0+gMpWcItRMuSrV/+me4P9kYcnZxu4h6v26ZBi78XPU
# MGt4LwJGzfMmbjwchLett4tRi78L3eNUgk6WsoC/+qZhHKaMOal/Nm9+8YEZRs6n
# H7ih/CoFMu6EB87sVnPffw22yMPOreyJHRw/vin1S41fVOnPgpkszwaXNkuN7dod
# 8Pea6Ws8gyKmdWoGSRjXZrayWxsiWN7e6rwFKuPvbn/AcK3gfJdbhaBMY+LPITFN
# AgMBAAGjggFJMIIBRTAdBgNVHQ4EFgQUPNqMx3C0BnoSgHkd51yyu7QMdkkwHwYD
# VR0jBBgwFoAUn6cVXQBeYl2D9OXSZacbUzUZ6XIwXwYDVR0fBFgwVjBUoFKgUIZO
# aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWljcm9zb2Z0JTIw
# VGltZS1TdGFtcCUyMFBDQSUyMDIwMTAoMSkuY3JsMGwGCCsGAQUFBwEBBGAwXjBc
# BggrBgEFBQcwAoZQaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jZXJ0
# cy9NaWNyb3NvZnQlMjBUaW1lLVN0YW1wJTIwUENBJTIwMjAxMCgxKS5jcnQwDAYD
# VR0TAQH/BAIwADAWBgNVHSUBAf8EDDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMC
# B4AwDQYJKoZIhvcNAQELBQADggIBALTFQ8/7K3CS11GFiVn0GTj9svMs7Or7BwLt
# UBpFAcZFL4g/JT/w4uJWhdyjIooqJFDsr1z3Q50z6ovg+LMqdK0sMGxZP52zWFrI
# 2RPCeFVxl4DUQYqU1m92VOwJTEnkLvKhlCYD7aWmTTg8aNwWEfWAZGmHP61wM0r8
# K0on4+sS42PuyCYGin8kVBxjKaI/++v5252spB5K1xNX1bXdybYUPkX9dY7ftOL4
# bhODUGRTblED63xEJbL8ge6DeutjOpRx1VGrtSBGXjRgiRM2e5yjqfLu8QGZYWNy
# vtKS+j9Ba547w0C8/Zkp/dAx+J2YfXG/HH2H3BVTqu8RD89QmLemiliytAq6iCmF
# 0+odnmP06hD4SMAJR+AmUeefwZVs9bfEamUKRdvIQeF5A139rdf/bOlLARE45zLV
# hp5Cq5+UaKUB/TLjQAUqpbZDXJNvX1xFcGlHNtlU75FdQHgDpQvUTVeO3Ov9v2rP
# 1ThQ1XzDLxi//TtuneEAV/EHiafRz4875gW/ZixW9gBNUjaXAv1ANIS3wXRFbot6
# TE9+9uSZVJHA/ql/kBR+Sqigprql+pMKd2kZPvUfKKW16VoyFFSw1WRorMAmtSgR
# JKPuxM/VkaJL0mAj6ncA7l+cyG3eYscyDrwazNIfhbLe9QMmmNRNgu1pNaRC3PpS
# pk83tZeGMIIHcTCCBVmgAwIBAgITMwAAABXF52ueAptJmQAAAAAAFTANBgkqhkiG
# 9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAO
# BgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEy
# MDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIw
# MTAwHhcNMjEwOTMwMTgyMjI1WhcNMzAwOTMwMTgzMjI1WjB8MQswCQYDVQQGEwJV
# UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE
# ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGlt
# ZS1TdGFtcCBQQ0EgMjAxMDCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIB
# AOThpkzntHIhC3miy9ckeb0O1YLT/e6cBwfSqWxOdcjKNVf2AX9sSuDivbk+F2Az
# /1xPx2b3lVNxWuJ+Slr+uDZnhUYjDLWNE893MsAQGOhgfWpSg0S3po5GawcU88V2
# 9YZQ3MFEyHFcUTE3oAo4bo3t1w/YJlN8OWECesSq/XJprx2rrPY2vjUmZNqYO7oa
# ezOtgFt+jBAcnVL+tuhiJdxqD89d9P6OU8/W7IVWTe/dvI2k45GPsjksUZzpcGkN
# yjYtcI4xyDUoveO0hyTD4MmPfrVUj9z6BVWYbWg7mka97aSueik3rMvrg0XnRm7K
# MtXAhjBcTyziYrLNueKNiOSWrAFKu75xqRdbZ2De+JKRHh09/SDPc31BmkZ1zcRf
# NN0Sidb9pSB9fvzZnkXftnIv231fgLrbqn427DZM9ituqBJR6L8FA6PRc6ZNN3SU
# HDSCD/AQ8rdHGO2n6Jl8P0zbr17C89XYcz1DTsEzOUyOArxCaC4Q6oRRRuLRvWoY
# WmEBc8pnol7XKHYC4jMYctenIPDC+hIK12NvDMk2ZItboKaDIV1fMHSRlJTYuVD5
# C4lh8zYGNRiER9vcG9H9stQcxWv2XFJRXRLbJbqvUAV6bMURHXLvjflSxIUXk8A8
# FdsaN8cIFRg/eKtFtvUeh17aj54WcmnGrnu3tz5q4i6tAgMBAAGjggHdMIIB2TAS
# BgkrBgEEAYI3FQEEBQIDAQABMCMGCSsGAQQBgjcVAgQWBBQqp1L+ZMSavoKRPEY1
# Kc8Q/y8E7jAdBgNVHQ4EFgQUn6cVXQBeYl2D9OXSZacbUzUZ6XIwXAYDVR0gBFUw
# UzBRBgwrBgEEAYI3TIN9AQEwQTA/BggrBgEFBQcCARYzaHR0cDovL3d3dy5taWNy
# b3NvZnQuY29tL3BraW9wcy9Eb2NzL1JlcG9zaXRvcnkuaHRtMBMGA1UdJQQMMAoG
# CCsGAQUFBwMIMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIAQwBBMAsGA1UdDwQEAwIB
# hjAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNX2VsuP6KJcYmjRPZSQW9fO
# mhjEMFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9w
# a2kvY3JsL3Byb2R1Y3RzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNybDBaBggr
# BgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNv
# bS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3J0MA0GCSqGSIb3
# DQEBCwUAA4ICAQCdVX38Kq3hLB9nATEkW+Geckv8qW/qXBS2Pk5HZHixBpOXPTEz
# tTnXwnE2P9pkbHzQdTltuw8x5MKP+2zRoZQYIu7pZmc6U03dmLq2HnjYNi6cqYJW
# AAOwBb6J6Gngugnue99qb74py27YP0h1AdkY3m2CDPVtI1TkeFN1JFe53Z/zjj3G
# 82jfZfakVqr3lbYoVSfQJL1AoL8ZthISEV09J+BAljis9/kpicO8F7BUhUKz/Aye
# ixmJ5/ALaoHCgRlCGVJ1ijbCHcNhcy4sa3tuPywJeBTpkbKpW99Jo3QMvOyRgNI9
# 5ko+ZjtPu4b6MhrZlvSP9pEB9s7GdP32THJvEKt1MMU0sHrYUP4KWN1APMdUbZ1j
# dEgssU5HLcEUBHG/ZPkkvnNtyo4JvbMBV0lUZNlz138eW0QBjloZkWsNn6Qo3GcZ
# KCS6OEuabvshVGtqRRFHqfG3rsjoiV5PndLQTHa1V1QJsWkBRH58oWFsc/4Ku+xB
# Zj1p/cvBQUl+fpO+y/g75LcVv7TOPqUxUYS8vwLBgqJ7Fx0ViY1w/ue10CgaiQuP
# Ntq6TPmb/wrpNPgkNWcr4A245oyZ1uEi6vAnQj0llOZ0dFtq0Z4+7X6gMTN9vMvp
# e784cETRkPHIqzqKOghif9lwY1NNje6CbaUFEMFxBmoQtB1VM1izoXBm8qGCA00w
# ggI1AgEBMIH5oYHRpIHOMIHLMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGlu
# Z3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
# cmF0aW9uMSUwIwYDVQQLExxNaWNyb3NvZnQgQW1lcmljYSBPcGVyYXRpb25zMScw
# JQYDVQQLEx5uU2hpZWxkIFRTUyBFU046MzcwMy0wNUUwLUQ5NDcxJTAjBgNVBAMT
# HE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2WiIwoBATAHBgUrDgMCGgMVAC0z
# XZaOjbHEDmx27MH/cd3NmaJIoIGDMIGApH4wfDELMAkGA1UEBhMCVVMxEzARBgNV
# BAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jv
# c29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAg
# UENBIDIwMTAwDQYJKoZIhvcNAQELBQACBQDpYvdaMCIYDzIwMjQwMTMwMDQxOTM4
# WhgPMjAyNDAxMzEwNDE5MzhaMHQwOgYKKwYBBAGEWQoEATEsMCowCgIFAOli91oC
# AQAwBwIBAAICCd8wBwIBAAICEyMwCgIFAOlkSNoCAQAwNgYKKwYBBAGEWQoEAjEo
# MCYwDAYKKwYBBAGEWQoDAqAKMAgCAQACAwehIKEKMAgCAQACAwGGoDANBgkqhkiG
# 9w0BAQsFAAOCAQEAXLgsj2XB1lvIcJkbwNDn/rt1tr1+Xa5ndFu2xlB6XzYnvdbp
# SyRWflmRzd8dOukiuSblaW70V/GUSfubZi4mjXTOB0AH85H2cS0SZclYnprxPQN1
# 0WG+p8jupmQK1Yb+R3m1v6WBnYs6emS0XlS8Djbzf9SsQbfSnciVQgFs97+i/Eci
# paJHocrXlKUjyRX8MGjMMHIpriuy9H0xWGyNUh4RQZJ3TH/nwpzK+vY0EZUbpvlB
# iK+0QPzyepEsp/SZp9n+yVDySzh5FZu8F6fZJAXUiMU8LxSTuoXRyfKKYUUdfiEu
# oK7sp0FrBihPiHm2KUnL77PcA4RYrh0PzBGo2zGCBA0wggQJAgEBMIGTMHwxCzAJ
# BgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25k
# MR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jv
# c29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwAhMzAAAB1OTpAy/ArGmsAAEAAAHUMA0G
# CWCGSAFlAwQCAQUAoIIBSjAaBgkqhkiG9w0BCQMxDQYLKoZIhvcNAQkQAQQwLwYJ
# KoZIhvcNAQkEMSIEILnjh0wIBuEwjc0EvGijL5Q6bGLThmyyWnJFh38qBDZkMIH6
# BgsqhkiG9w0BCRACLzGB6jCB5zCB5DCBvQQgzOqH+tgUpc6XO9ZLnEK0+L1pT58F
# STEiuJenZZM9YjcwgZgwgYCkfjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2Fz
# aGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENv
# cnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAx
# MAITMwAAAdTk6QMvwKxprAABAAAB1DAiBCAlyxEVCkrR4OJFM+CeRFiZlXSytYsr
# 4P0+xWDsjxOvyTANBgkqhkiG9w0BAQsFAASCAgBWy6MCKnwfzLpgJan6BTkFMB9C
# yqVJofAfz5X5FawqgGkejN9z7r9gpHshMfZYD8FKCizYbYLeXqSAdfsDyK6SV/ik
# dos1/vfLhCK76p7VbNZXWuP7piGVoBZUxeX3P1RzFKMw7u80Es01va8Q9McbtKjW
# 2X0AdwNEjCmGCLRGm0DZsAOPwPhl6YMbq3KbcomFScA1oMiZ02IVHoZalj3Pob3G
# 1lcchxFVx2SAFFXG/QG8YamWejcisqaLt8EoaCasjhnKi5ZChyBKd3szsgjeFNkL
# /F8llGLagNf1SJq7K1GBEJehFWtbwteoOU3w45FBY1J3gOoO2paHV8h8wt26Hu6W
# DBmniOs5qPgqdp73mMLjtSbd23n/u+5WiHjSk2291t0c6kkoXAw/irBPQue+Ealj
# Jfzr6AN6wGQAZmzmh0V6CeDh20VgXhH7/1PBAlPHJ+z5fuBEtMJZtqZo82gCXfnN
# gb6XWS2w4r+Y/993nkx1H/2C1wy4Btb+vsoyRPzjM3v/944ROhEBewjGJJmpP7f/
# vcEElMj6nf/VjwWTTRs1oz4DXl2BRkbB15KagAuznnu6pEgabxMe1PbRPLZG8nGD
# MMzZA3cHkO/xj9/+SOXhlQt1pBijznUMYa7h7DYNoORyZk8VGVZdH6kDVpJ2rpqZ
# fhgGanrlhWGDKKyhQw==
# SIG # End signature block
